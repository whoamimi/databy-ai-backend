"""
app.agent.memory.gatekeeper.bigquery.utils

"""

import functools
import pandas as pd
from google.cloud import bigquery

def upload_dataframe_to_bq(df: pd.DataFrame, table_ref: str):
    """ Uploads a pandas DataFrame to a specified BigQuery table. """

    client = bigquery.Client()

    # table_ref = f"{project_id}.{dataset_id}.{table_id}"
    job_config = bigquery.LoadJobConfig(
        write_disposition=bigquery.WriteDisposition.WRITE_TRUNCATE,
        autodetect=True
    )
    job = client.load_table_from_dataframe(df, table_ref, job_config=job_config)
    job.result()  # Wait for the job to complete.
    print(f"âœ… Data uploaded to {table_ref}")

def pandas_gatekeeper(func):
    """
    A decorator that executes a SQL query generated by a function and returns a DataFrame.

    This decorator intercepts the SQL string returned by the wrapped function,
    executes it using the provided BigQuery client, and returns the result
    as a pandas DataFrame.

    The decorated function must be called with a 'client' keyword argument
    of type `google.cloud.bigquery.Client`.

    Args:
        func: The function to be decorated, which should return a SQL query string.

    Returns:
        A wrapper function that executes the query and returns a DataFrame.

    Raises:
        TypeError: If the 'client' keyword argument is not provided or is not a
                   `bigquery.Client` instance.
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):

        client = bigquery.Client()  # Since running in notebook.

        # Call the original function to get the SQL query string
        sql_query = func(*args, **kwargs)

        print(f"--- Executing SQL from '{func.__name__}' ---")
        print(sql_query)

        # Execute the query and return the result as a pandas DataFrame
        job = client.query(sql_query)
        return job.to_dataframe()

    return wrapper
